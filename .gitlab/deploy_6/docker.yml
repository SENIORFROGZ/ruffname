---
# FIXME: our current Gitlab version doesn't support importing a file more than once
# For now, the workaround is to include "common" files once in the top-level .gitlab-ci.yml file
# See: https://gitlab.com/gitlab-org/gitlab/-/issues/28987
# include:
#   - /.gitlab/docker_common/tag_job_templates.yml

#
# Image tagging & manifest publication
#

deploy-a6:
  extends: .docker_job_definition
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:2xlarge"]
  stage: deploy6
  rules:
    !reference [.on_deploy_a6_manual]
  dependencies: []
  script:
    - VERSION=$(inv -e agent.version --major-version 6 --url-safe)
    - | # If we're not deploying on tag 6, target the dev repo instead
      if [[ "$DEPLOY_AGENT" != "true" ]] || [[ "$RELEASE_VERSION_6" == "nightly" ]] || [[ "$RELEASE_VERSION_6" == "" ]]; then
        REPOSITORY="${REPOSITORY}-dev"
      fi
    - echo "Working on repsoitory ${REPOSITORY}"
    # Platform-specific agent images
    - inv -e docker.publish-bulk ${SIGNING_ARGS} --platform linux/amd64 --src-template ${SRC_AGENT}:${SRC_TAG}-6-ARCH      --dst-template ${REPOSITORY}-ARCH:${VERSION}
    - inv -e docker.publish-bulk ${SIGNING_ARGS} --platform linux/amd64 --src-template ${SRC_AGENT}:${SRC_TAG}-6-jmx-ARCH  --dst-template ${REPOSITORY}-ARCH:${VERSION}-jmx

    # Manifests
    - inv -e docker.publish-manifest ${SIGNING_ARGS} --name ${REPOSITORY} --tag ${VERSION} --image ${REPOSITORY}-amd64:${VERSION},linux/amd64
    - inv -e docker.publish-manifest ${SIGNING_ARGS} --name ${REPOSITORY} --tag ${VERSION}-jmx  --image ${REPOSITORY}-amd64:${VERSION}-jmx,linux/amd64

deploy_docker_hub-a6:
  extends: 
    - .docker_tag_job_definition
    - .deploy_docker-a6
  rules:
    # TODO: Use in-rule variables instead of a condition in script once we reach Gitlab 13.8
    # - <<: *if_deploy_on_tag_6
    #   when: manual
    #   allow_failure: true
    #   variables:
    #     REPOSITORY: datadog/agent
    # - <<: *if_deploy_6
    #   when: manual
    #   allow_failure: true
    #   variables:
    #     REPOSITORY: datadog/agent-dev
    - <<: *if_deploy_6
      when: manual
      allow_failure: true
  variables:
    REPOSITORY: datadog/agent
    SIGNING_ARGS: --signed-push

deploy_google_container_registry-a6:
  extends: 
    - .google_container_registry_tag_job_definition
    - .deploy_docker-a6
  rules:
    # TODO: Use in-rule variables instead of a condition in script once we reach Gitlab 13.8
    # - <<: *if_deploy_on_tag_6
    #   when: manual
    #   allow_failure: true
    #   variables:
    #     REPOSITORY: gcr.io/datadoghq/agent
    # - <<: *if_deploy_6
    #   when: manual
    #   allow_failure: true
    #   variables:
    #     REPOSITORY: gcr.io/datadoghq/agent-dev
    - <<: *if_deploy_6
      when: manual
      allow_failure: true
  variables:
    REPOSITORY: gcr.io/datadoghq/agent
    SIGNING_ARGS: ""


#
# Latest publication
#

deploy_latest-a6:
  extends: .docker_job_definition
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:2xlarge"]
  stage: deploy6
  dependencies: []
  script:
    - VERSION=$(inv -e agent.version --major-version 6 --url-safe)
    - | # If we're not deploying on tag 6, target the dev repo instead
      if [[ "$DEPLOY_AGENT" != "true" ]] || [[ "$RELEASE_VERSION_6" == "nightly" ]] || [[ "$RELEASE_VERSION_6" == "" ]]; then
        REPOSITORY="${REPOSITORY}-dev"
      fi
    - echo "Working on repsoitory ${REPOSITORY}"
    - inv -e docker.publish-manifest ${SIGNING_ARGS} --name ${REPOSITORY} --tag latest-py2 --image ${REPOSITORY}-amd64:${VERSION},linux/amd64
    - inv -e docker.publish-manifest ${SIGNING_ARGS} --name ${REPOSITORY} --tag latest-py2-jmx --image ${REPOSITORY}-amd64:${VERSION}-jmx,linux/amd64
    - inv -e docker.publish-manifest ${SIGNING_ARGS} --name ${REPOSITORY} --tag 6 --image ${REPOSITORY}-amd64:${VERSION},linux/amd64
    - inv -e docker.publish-manifest ${SIGNING_ARGS} --name ${REPOSITORY} --tag 6-jmx --image ${REPOSITORY}-amd64:${VERSION}-jmx,linux/amd64

deploy_latest_docker_hub-a6:
  extends:
    - .docker_tag_job_definition
    - .deploy_latest-a6
  rules:
    !reference [.on_deploy_a6_manual]
  dependencies: []
  script: # We can't use the 'trigger' keyword on manual jobs, otherwise they can't be run if the pipeline fails and is retried
    - python3 -m pip install -r requirements.txt
    - inv pipeline.trigger-child-pipeline --project-name "DataDog/public-images" --git-ref "main" --variables "IMG_REGISTRIES,IMG_SOURCES,IMG_DESTINATIONS"
  parallel:
    matrix:
      - IMG_SOURCES: ${SRC_AGENT}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-6-amd64,${SRC_AGENT}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-6-arm64
        IMG_DESTINATIONS: ${AGENT_REPOSITORY}:6,${AGENT_REPOSITORY}:latest-py2
      - IMG_SOURCES: ${SRC_AGENT}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-6-jmx-amd64,${SRC_AGENT}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-6-jmx-arm64
        IMG_DESTINATIONS: ${AGENT_REPOSITORY}:6-jmx,${AGENT_REPOSITORY}:latest-py2-jmx
